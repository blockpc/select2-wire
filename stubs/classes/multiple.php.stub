<?php

declare(strict_types=1);

namespace App\Http\Livewire\Select2;

use Livewire\Component;
use App\Models\[CLASS_MODEL];

/**
 * Multiple Select2 Component
 *
 * @package Blockpc\Select2Wire
 */
class [SELECT_CLASS] extends Component
{
    public $search;
    public $[MODEL_PLURAL];

    public function mount()
    {
        $this->[MODEL_PLURAL] = collect([]);
    }

    public function getOptionsProperty()
    {
        return [CLASS_MODEL]::where('name', 'LIKE', "%{$this->search}%")->get();
    }

    public function render()
    {
        return view('livewire.select2.[VIEW_NAME]-select2', [
            'options' => $this->options,
        ]);
    }

    public function save()
    {
        $temporal = $this->temporal();
        foreach( $temporal as $key => $name ) {
            $[MODEL] = [CLASS_MODEL]::firstOrCreate(['name' => $name]);
            if ( ! $this->[MODEL_PLURAL]->contains('id', $[MODEL]->id) ) {
                $this->[MODEL_PLURAL]->push($[MODEL]->only(['id', 'name']));
            }
        }
        $this->search = "";
    }

    public function select([CLASS_MODEL] $[MODEL])
    {
        if ( ! $this->[MODEL_PLURAL]->contains('id', $[MODEL]->id) ) {
            $this->[MODEL_PLURAL]->push($[MODEL]->only(['id', 'name']));
        }
    }

    public function remove(int $index)
    {
        $this->[MODEL_PLURAL]->forget($index);
    }

    public function clear()
    {
        $this->[MODEL_PLURAL] = collect([]);
        $this->search = "";
    }

    private function temporal()
    {
        $temporal = [];
        $temporal = explode(",", $this->search);
        $temporal = array_filter($temporal, 'strlen');
        $temporal = array_map('trim', $temporal);
        return $temporal;
    }
}